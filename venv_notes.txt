sudo apt get install python3-venv

// can create the venv anywhere
python3 -m venv <name of virtual env> // creates virtual environment

// in the same directory as your venv
ls <name of env>/bin // you should see an activate file

source <name of env>/bin/activate // this will put you in the virtual env

// once you're in your env you don't have to specify python3, you can just do python

// cd into the cs320_proj

pip install -r requirements.txt // pip reads the file and installs them in the venv


open browser  > ctrl o > navigate to project > build/html > open index.html

making another .rst file will make another page > put them under refdocs folder > follow the template


Creating/Editing a new page:
refdocs: cs320_proj > sphnix > source > refdocs > create new file > nameOfFile.rst

** easiest to copy/paste from existing template to follow the form

**IMPORTANT**
open > index.rst (which is in the refdocs file from above) > add name of .rst file to the list of file names

// to see the site
cd sphinx
make clean; make html // creates the website


Git for VS Code: 
Source Control Tab (Left hand side menu) > press + to commit changes > ... (more actions menu) > push



deactivte // exits out of env


** do not murder env until you're completely done with the project - deactivate instead


------------------------extra things from Sam----------------------------------
@cs320 I just pushed a few things to the main repository on master branch.


you can now run setup.py to build a wheel file, wheel files are the current standard for distributing libraries in python.
the setup script will handle building a fresh copy of the sphinx reference documents.

If you want to test stuff you can run ./qls.py (qls is short for quick launch site)
this will launch pofis on port 8080.
the code that mounts the static directories is smart enough to look for the sphinx build folder if it can't find the refdocs in the 'installation' directory. (as in, where it would be put during a pip install),
so you can just: run make html in the sphinx directory, then run qls.py in the base project directory
then navigate to localhost:8080 in a browser
it should automatically redirect you to http://localhost:8080/refdocs/index.html
I haven't yet tested it, but it should be smart enough to handle changes in the sphinx build directory while the webserver is up
so you can leave it running and rebuild the sphinx documents and refresh the page
the only thing that may be getting in the way is a browser cache. Otherwise you should get served the new content.
if you want to test behavior at installation:
run python setup.py bdist_wheel, this will build a new .whl file in dist
use pip to install that wheel file:
pip install dist/<that wheel file>
cd somewhere else to be sure you load the install module instead of the local directory
then try importing pofis:
import pofis
then do whatever testing you need to do


other:
// anything before the ; if it doesn't build what's after the ; will still build
// stuff1 && stuff2 -- if stuff1 doesn't build then stuff2 won't build  
make clean; make html && execute whatever
